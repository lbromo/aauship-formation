// Generated by gencpp from file aauship/GPS.msg
// DO NOT EDIT!


#ifndef AAUSHIP_MESSAGE_GPS_H
#define AAUSHIP_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace aauship
{
template <class ContainerAllocator>
struct GPS_
{
  typedef GPS_<ContainerAllocator> Type;

  GPS_()
    : header()
    , time(0)
    , latitude(0.0)
    , longitude(0.0)
    , fix(0)
    , sats(0)
    , HDOP(0.0)
    , SOG(0.0)
    , track_angle(0.0)
    , date(0)
    , altitude(0.0)
    , height(0.0)  {
    }
  GPS_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0)
    , latitude(0.0)
    , longitude(0.0)
    , fix(0)
    , sats(0)
    , HDOP(0.0)
    , SOG(0.0)
    , track_angle(0.0)
    , date(0)
    , altitude(0.0)
    , height(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _time_type;
  _time_type time;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef int8_t _fix_type;
  _fix_type fix;

   typedef int8_t _sats_type;
  _sats_type sats;

   typedef float _HDOP_type;
  _HDOP_type HDOP;

   typedef float _SOG_type;
  _SOG_type SOG;

   typedef float _track_angle_type;
  _track_angle_type track_angle;

   typedef int32_t _date_type;
  _date_type date;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _height_type;
  _height_type height;




  typedef boost::shared_ptr< ::aauship::GPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aauship::GPS_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_

typedef ::aauship::GPS_<std::allocator<void> > GPS;

typedef boost::shared_ptr< ::aauship::GPS > GPSPtr;
typedef boost::shared_ptr< ::aauship::GPS const> GPSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aauship::GPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aauship::GPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aauship

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'aauship': ['/home/kenny/Documents/aauship-formation/code/hli/ros/src/aauship/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aauship::GPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aauship::GPS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aauship::GPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aauship::GPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aauship::GPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aauship::GPS_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aauship::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59eb261093321a9384f39bd4027c569d";
  }

  static const char* value(const ::aauship::GPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59eb261093321a93ULL;
  static const uint64_t static_value2 = 0x84f39bd4027c569dULL;
};

template<class ContainerAllocator>
struct DataType< ::aauship::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aauship/GPS";
  }

  static const char* value(const ::aauship::GPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aauship::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# GPS information\n\
# This can contain relevant information from $GPGGA and $GPRMC messages\n\
Header header\n\
int32   time\n\
float32 latitude\n\
float32 longitude\n\
int8    fix      # Fix quality 1 = GPS fix (single precission)\n\
int8    sats     # Number of satellites\n\
float32 HDOP     # Horizontal dillution of precission\n\
float32 SOG      # Speed over ground\n\
float32 track_angle # Track angle\n\
int32   date     # Date in NMEA format\n\
float32 altitude # Altitude over mean sea level\n\
float32 height   # Height of geoid (mean sea level) above WGS84 ellipsoid\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::aauship::GPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aauship::GPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.fix);
      stream.next(m.sats);
      stream.next(m.HDOP);
      stream.next(m.SOG);
      stream.next(m.track_angle);
      stream.next(m.date);
      stream.next(m.altitude);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aauship::GPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aauship::GPS_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "fix: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fix);
    s << indent << "sats: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sats);
    s << indent << "HDOP: ";
    Printer<float>::stream(s, indent + "  ", v.HDOP);
    s << indent << "SOG: ";
    Printer<float>::stream(s, indent + "  ", v.SOG);
    s << indent << "track_angle: ";
    Printer<float>::stream(s, indent + "  ", v.track_angle);
    s << indent << "date: ";
    Printer<int32_t>::stream(s, indent + "  ", v.date);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AAUSHIP_MESSAGE_GPS_H
