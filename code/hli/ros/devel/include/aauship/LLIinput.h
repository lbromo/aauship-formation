// Generated by gencpp from file aauship/LLIinput.msg
// DO NOT EDIT!


#ifndef AAUSHIP_MESSAGE_LLIINPUT_H
#define AAUSHIP_MESSAGE_LLIINPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aauship
{
template <class ContainerAllocator>
struct LLIinput_
{
  typedef LLIinput_<ContainerAllocator> Type;

  LLIinput_()
    : DevID(0)
    , MsgID(0)
    , Data(0)
    , Time(0.0)  {
    }
  LLIinput_(const ContainerAllocator& _alloc)
    : DevID(0)
    , MsgID(0)
    , Data(0)
    , Time(0.0)  {
    }



   typedef uint8_t _DevID_type;
  _DevID_type DevID;

   typedef uint8_t _MsgID_type;
  _MsgID_type MsgID;

   typedef int16_t _Data_type;
  _Data_type Data;

   typedef double _Time_type;
  _Time_type Time;




  typedef boost::shared_ptr< ::aauship::LLIinput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aauship::LLIinput_<ContainerAllocator> const> ConstPtr;

}; // struct LLIinput_

typedef ::aauship::LLIinput_<std::allocator<void> > LLIinput;

typedef boost::shared_ptr< ::aauship::LLIinput > LLIinputPtr;
typedef boost::shared_ptr< ::aauship::LLIinput const> LLIinputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aauship::LLIinput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aauship::LLIinput_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aauship

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'aauship': ['/home/kenny/Documents/aauship-formation/code/hli/ros/src/aauship/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aauship::LLIinput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aauship::LLIinput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aauship::LLIinput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aauship::LLIinput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aauship::LLIinput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aauship::LLIinput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aauship::LLIinput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a94107953bed535b2b14516497d99ca7";
  }

  static const char* value(const ::aauship::LLIinput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa94107953bed535bULL;
  static const uint64_t static_value2 = 0x2b14516497d99ca7ULL;
};

template<class ContainerAllocator>
struct DataType< ::aauship::LLIinput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aauship/LLIinput";
  }

  static const char* value(const ::aauship::LLIinput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aauship::LLIinput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is the lli input message format for AAUSHIP\n\
uint8 DevID\n\
uint8 MsgID\n\
int16 Data\n\
float64 Time\n\
";
  }

  static const char* value(const ::aauship::LLIinput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aauship::LLIinput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DevID);
      stream.next(m.MsgID);
      stream.next(m.Data);
      stream.next(m.Time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LLIinput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aauship::LLIinput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aauship::LLIinput_<ContainerAllocator>& v)
  {
    s << indent << "DevID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DevID);
    s << indent << "MsgID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MsgID);
    s << indent << "Data: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Data);
    s << indent << "Time: ";
    Printer<double>::stream(s, indent + "  ", v.Time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AAUSHIP_MESSAGE_LLIINPUT_H
