// Generated by gencpp from file aauship/controlTest.msg
// DO NOT EDIT!


#ifndef AAUSHIP_MESSAGE_CONTROLTEST_H
#define AAUSHIP_MESSAGE_CONTROLTEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <aauship/PID.h>
#include <aauship/testSetpoints.h>

namespace aauship
{
template <class ContainerAllocator>
struct controlTest_
{
  typedef controlTest_<ContainerAllocator> Type;

  controlTest_()
    : pid()
    , setpoints()  {
    }
  controlTest_(const ContainerAllocator& _alloc)
    : pid(_alloc)
    , setpoints(_alloc)  {
    }



   typedef  ::aauship::PID_<ContainerAllocator>  _pid_type;
  _pid_type pid;

   typedef  ::aauship::testSetpoints_<ContainerAllocator>  _setpoints_type;
  _setpoints_type setpoints;




  typedef boost::shared_ptr< ::aauship::controlTest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aauship::controlTest_<ContainerAllocator> const> ConstPtr;

}; // struct controlTest_

typedef ::aauship::controlTest_<std::allocator<void> > controlTest;

typedef boost::shared_ptr< ::aauship::controlTest > controlTestPtr;
typedef boost::shared_ptr< ::aauship::controlTest const> controlTestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aauship::controlTest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aauship::controlTest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aauship

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'aauship': ['/home/kenny/Documents/aauship-formation/code/hli/ros/src/aauship/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aauship::controlTest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aauship::controlTest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aauship::controlTest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aauship::controlTest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aauship::controlTest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aauship::controlTest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aauship::controlTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc467b6eed7e26ccc32696c510ec064d";
  }

  static const char* value(const ::aauship::controlTest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc467b6eed7e26ccULL;
  static const uint64_t static_value2 = 0xc32696c510ec064dULL;
};

template<class ContainerAllocator>
struct DataType< ::aauship::controlTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aauship/controlTest";
  }

  static const char* value(const ::aauship::controlTest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aauship::controlTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Coherent message format for all the stuff that is of use for the control-test-node.py\n\
aauship/PID pid\n\
aauship/testSetpoints setpoints\n\
\n\
================================================================================\n\
MSG: aauship/PID\n\
# This is a msg format for exchanging PID controller values\n\
float64 Kp\n\
float64 Ki\n\
float64 Kd\n\
\n\
================================================================================\n\
MSG: aauship/testSetpoints\n\
# Thi is the msg format for the control-test-node and rqt_mypkg\n\
# interface\n\
float64 cmd_vel\n\
float64 cmd_angvel\n\
float64 cmd_ang\n\
int64 controller_type\n\
";
  }

  static const char* value(const ::aauship::controlTest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aauship::controlTest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pid);
      stream.next(m.setpoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct controlTest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aauship::controlTest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aauship::controlTest_<ContainerAllocator>& v)
  {
    s << indent << "pid: ";
    s << std::endl;
    Printer< ::aauship::PID_<ContainerAllocator> >::stream(s, indent + "  ", v.pid);
    s << indent << "setpoints: ";
    s << std::endl;
    Printer< ::aauship::testSetpoints_<ContainerAllocator> >::stream(s, indent + "  ", v.setpoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AAUSHIP_MESSAGE_CONTROLTEST_H
