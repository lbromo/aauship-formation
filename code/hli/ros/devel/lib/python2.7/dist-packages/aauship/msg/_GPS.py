"""autogenerated by genpy from aauship/GPS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GPS(genpy.Message):
  _md5sum = "59eb261093321a9384f39bd4027c569d"
  _type = "aauship/GPS"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# GPS information
# This can contain relevant information from $GPGGA and $GPRMC messages
Header header
int32   time
float32 latitude
float32 longitude
int8    fix      # Fix quality 1 = GPS fix (single precission)
int8    sats     # Number of satellites
float32 HDOP     # Horizontal dillution of precission
float32 SOG      # Speed over ground
float32 track_angle # Track angle
int32   date     # Date in NMEA format
float32 altitude # Altitude over mean sea level
float32 height   # Height of geoid (mean sea level) above WGS84 ellipsoid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','time','latitude','longitude','fix','sats','HDOP','SOG','track_angle','date','altitude','height']
  _slot_types = ['std_msgs/Header','int32','float32','float32','int8','int8','float32','float32','float32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,latitude,longitude,fix,sats,HDOP,SOG,track_angle,date,altitude,height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.fix is None:
        self.fix = 0
      if self.sats is None:
        self.sats = 0
      if self.HDOP is None:
        self.HDOP = 0.
      if self.SOG is None:
        self.SOG = 0.
      if self.track_angle is None:
        self.track_angle = 0.
      if self.date is None:
        self.date = 0
      if self.altitude is None:
        self.altitude = 0.
      if self.height is None:
        self.height = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.time = 0
      self.latitude = 0.
      self.longitude = 0.
      self.fix = 0
      self.sats = 0
      self.HDOP = 0.
      self.SOG = 0.
      self.track_angle = 0.
      self.date = 0
      self.altitude = 0.
      self.height = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2f2b3fi2f.pack(_x.time, _x.latitude, _x.longitude, _x.fix, _x.sats, _x.HDOP, _x.SOG, _x.track_angle, _x.date, _x.altitude, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.time, _x.latitude, _x.longitude, _x.fix, _x.sats, _x.HDOP, _x.SOG, _x.track_angle, _x.date, _x.altitude, _x.height,) = _struct_i2f2b3fi2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2f2b3fi2f.pack(_x.time, _x.latitude, _x.longitude, _x.fix, _x.sats, _x.HDOP, _x.SOG, _x.track_angle, _x.date, _x.altitude, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.time, _x.latitude, _x.longitude, _x.fix, _x.sats, _x.HDOP, _x.SOG, _x.track_angle, _x.date, _x.altitude, _x.height,) = _struct_i2f2b3fi2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2f2b3fi2f = struct.Struct("<i2f2b3fi2f")
_struct_3I = struct.Struct("<3I")
